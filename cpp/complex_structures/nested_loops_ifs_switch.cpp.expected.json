{
  "language": "C++",
  "ast": {
    "type": "translation_unit",
    "functions": [
      {
        "name": "process_nested_data",
        "type": "function_definition",
        "return_type": "int",
        "parameters": [
          {"name": "data", "type": "const std::vector<std::vector<int>>&"}
        ],
        "body_range": {
          "start_line": 19,
          "start_column": 0,
          "end_line": 78,
          "end_column": 1
        },
        "docstring": "Process a set of nested data with complex control flow\nParam data The multi-dimensional data to process\nReturn Number of elements processed"
      },
      {
        "name": "main",
        "type": "function_definition",
        "return_type": "int",
        "parameters": [],
        "body_range": {
          "start_line": 83,
          "start_column": 0,
          "end_line": 97,
          "end_column": 1
        },
        "docstring": "Program entry point\nReturn Exit status code"
      }
    ],
    "includes": [
      {
        "path": "iostream",
        "system": true,
        "line": 11
      },
      {
        "path": "vector",
        "system": true,
        "line": 12
      },
      {
        "path": "stdexcept",
        "system": true,
        "line": 13
      }
    ],
    "comments": [
      {
        "type": "block_comment",
        "text": "This example shows:\n- Deeply nested loops\n- Complex nested conditional structures\n- Switch statements within loops and conditions\n- Try-catch blocks within control structures",
        "range": {
          "start_line": 1,
          "start_column": 0,
          "end_line": 8,
          "end_column": 3
        }
      },
      {
        "type": "block_comment",
        "text": "Process a set of nested data with complex control flow\nParam data The multi-dimensional data to process\nReturn Number of elements processed",
        "range": {
          "start_line": 15,
          "start_column": 0,
          "end_line": 19,
          "end_column": 3
        }
      },
      {
        "type": "block_comment",
        "text": "Program entry point\nReturn Exit status code",
        "range": {
          "start_line": 80,
          "start_column": 0,
          "end_line": 83,
          "end_column": 3
        }
      },
      {
        "type": "line_comment",
        "text": "Skip processing for certain values",
        "line": 29
      },
      {
        "type": "line_comment",
        "text": "Process based on value categories",
        "line": 35
      },
      {
        "type": "line_comment",
        "text": "Nested switch for small values",
        "line": 40
      },
      {
        "type": "line_comment",
        "text": "Nested try-catch within the condition",
        "line": 57
      },
      {
        "type": "line_comment",
        "text": "More nested conditions",
        "line": 63
      },
      {
        "type": "line_comment",
        "text": "Create a sample nested data structure",
        "line": 84
      },
      {
        "type": "line_comment",
        "text": "Process data with complex control flow",
        "line": 91
      }
    ],
    "variable_declarations": [
      {
        "name": "processed",
        "type": "int",
        "line": 20,
        "initialized": true
      },
      {
        "name": "i",
        "type": "size_t",
        "line": 22,
        "initialized": true
      },
      {
        "name": "row",
        "type": "const auto&",
        "line": 23,
        "initialized": true
      },
      {
        "name": "j",
        "type": "size_t",
        "line": 27,
        "initialized": true
      },
      {
        "name": "value",
        "type": "const int",
        "line": 28,
        "initialized": true
      },
      {
        "name": "nested_data",
        "type": "std::vector<std::vector<int>>",
        "line": 85,
        "initialized": true
      },
      {
        "name": "result",
        "type": "int",
        "line": 92,
        "initialized": true
      }
    ],
    "loops": [
      {
        "type": "for_statement",
        "range": {
          "start_line": 22,
          "start_column": 4,
          "end_line": 77,
          "end_column": 5
        }
      },
      {
        "type": "for_statement",
        "range": {
          "start_line": 27,
          "start_column": 8,
          "end_line": 76,
          "end_column": 9
        }
      }
    ],
    "conditionals": [
      {
        "type": "if_statement",
        "range": {
          "start_line": 30,
          "start_column": 12,
          "end_line": 33,
          "end_column": 13
        }
      },
      {
        "type": "if_statement",
        "range": {
          "start_line": 36,
          "start_column": 12,
          "end_line": 74,
          "end_column": 13
        }
      },
      {
        "type": "if_statement",
        "range": {
          "start_line": 58,
          "start_column": 20,
          "end_line": 61,
          "end_column": 21
        }
      },
      {
        "type": "if_statement",
        "range": {
          "start_line": 64,
          "start_column": 20,
          "end_line": 68,
          "end_column": 21
        }
      }
    ],
    "switch_statements": [
      {
        "type": "switch_statement",
        "range": {
          "start_line": 41,
          "start_column": 16,
          "end_line": 53,
          "end_column": 17
        },
        "cases": [
          {
            "value": "1",
            "line": 42
          },
          {
            "value": "2",
            "line": 43
          },
          {
            "value": "3",
            "line": 46
          },
          {
            "value": "4",
            "line": 47
          },
          {
            "value": "5",
            "line": 48
          },
          {
            "value": "default",
            "line": 51
          }
        ]
      }
    ],
    "try_catch_blocks": [
      {
        "type": "try_catch_block",
        "range": {
          "start_line": 58,
          "start_column": 16,
          "end_line": 73,
          "end_column": 17
        },
        "exceptions": [
          {
            "type": "const std::exception&",
            "name": "e",
            "line": 70
          }
        ]
      }
    ],
    "exceptions": [
      {
        "type": "throw_statement",
        "exception_type": "std::overflow_error",
        "message": "\"Value is too large to process safely\"",
        "line": 59
      }
    ],
    "function_calls": [
      {
        "name": "std::cout",
        "arguments": [
          "\"Processing row \"",
          "i",
          "\" (size: \"",
          "row.size()",
          "\")\"",
          "std::endl"
        ],
        "line": 25
      },
      {
        "name": "row.size",
        "arguments": [],
        "line": 25
      },
      {
        "name": "std::cout",
        "arguments": [
          "\"  Skipping negative value at [\"",
          "i",
          "\"][\"",
          "j",
          "\"]: \"",
          "value",
          "std::endl"
        ],
        "line": 31
      },
      {
        "name": "std::cout",
        "arguments": [
          "\"  Found zero value at [\"",
          "i",
          "\"][\"",
          "j",
          "\"]\"",
          "std::endl"
        ],
        "line": 37
      },
      {
        "name": "std::cout",
        "arguments": [
          "\"  Processing small value at [\"",
          "i",
          "\"][\"",
          "j",
          "\"]: \"",
          "value",
          "std::endl"
        ],
        "line": 39
      },
      {
        "name": "std::cout",
        "arguments": [
          "\"    Very small value (1-2)\"",
          "std::endl"
        ],
        "line": 44
      },
      {
        "name": "std::cout",
        "arguments": [
          "\"    Small value (3-5)\"",
          "std::endl"
        ],
        "line": 49
      },
      {
        "name": "std::cout",
        "arguments": [
          "\"    Medium-small value (6-10)\"",
          "std::endl"
        ],
        "line": 52
      },
      {
        "name": "std::cout",
        "arguments": [
          "\"  Processing large value at [\"",
          "i",
          "\"][\"",
          "j",
          "\"]: \"",
          "value",
          "std::endl"
        ],
        "line": 56
      },
      {
        "name": "std::cout",
        "arguments": [
          "\"    Large even value\"",
          "std::endl"
        ],
        "line": 65
      },
      {
        "name": "std::cout",
        "arguments": [
          "\"    Large odd value\"",
          "std::endl"
        ],
        "line": 67
      },
      {
        "name": "std::cerr",
        "arguments": [
          "\"    Error: \"",
          "e.what()",
          "std::endl"
        ],
        "line": 71
      },
      {
        "name": "e.what",
        "arguments": [],
        "line": 71
      },
      {
        "name": "std::cout",
        "arguments": [
          "\"Starting complex nested control flow example...\"",
          "std::endl"
        ],
        "line": 90
      },
      {
        "name": "process_nested_data",
        "arguments": [
          "nested_data"
        ],
        "line": 92
      },
      {
        "name": "std::cout",
        "arguments": [
          "\"Processed \"",
          "result",
          "\" elements successfully\"",
          "std::endl"
        ],
        "line": 94
      }
    ],
    "namespace_references": [
      {
        "name": "std",
        "line": 25,
        "context": "std::cout"
      },
      {
        "name": "std",
        "line": 25,
        "context": "std::endl"
      },
      {
        "name": "std",
        "line": 31,
        "context": "std::cout"
      },
      {
        "name": "std",
        "line": 31,
        "context": "std::endl"
      },
      {
        "name": "std",
        "line": 59,
        "context": "std::overflow_error"
      },
      {
        "name": "std",
        "line": 70,
        "context": "std::exception"
      },
      {
        "name": "std",
        "line": 85,
        "context": "std::vector<std::vector<int>>"
      }
    ]
  }
}
