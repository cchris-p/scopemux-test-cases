{
  "ast": {
    "children": [
      {
        "children": [],
        "content": "/**\n * @file complex_data_types.c\n * @brief Demonstration of structures, unions, and enumerations in C\n *\n * This example shows:\n * - Structure definitions and usage\n * - Nested structures\n * - Unions\n * - Enumerations\n * - Typedef\n * - Bit fields\n */",
        "end_column": 3,
        "end_line": 12,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 1,
        "type": "DOCSTRING"
      },
      {
        "children": [],
        "content": "#include <stdio.h>",
        "end_column": 18,
        "end_line": 14,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 14,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "#include <string.h>",
        "end_column": 19,
        "end_line": 15,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 15,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "#include <stdlib.h>",
        "end_column": 19,
        "end_line": 16,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 16,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Simple enumeration",
        "end_column": 21,
        "end_line": 18,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 18,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Enumeration with typedef",
        "end_column": 27,
        "end_line": 28,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 28,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Simple structure",
        "end_column": 19,
        "end_line": 39,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 39,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Structure with typedef",
        "end_column": 25,
        "end_line": 45,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 45,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Nested structure",
        "end_column": 19,
        "end_line": 53,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 53,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Structure with bit fields",
        "end_column": 28,
        "end_line": 59,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 59,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Union example",
        "end_column": 16,
        "end_line": 66,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 66,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Structure containing a union",
        "end_column": 31,
        "end_line": 73,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 73,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "/**\n * @brief Print details about a Point structure\n * @param p The Point to print\n */",
        "end_column": 3,
        "end_line": 86,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 83,
        "type": "DOCSTRING"
      },
      {
        "children": [],
        "content": "/**\n * @brief Calculate the area of a Rectangle\n * @param rect The Rectangle to calculate the area of\n * @return The area of the rectangle\n */",
        "end_column": 3,
        "end_line": 95,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 91,
        "type": "DOCSTRING"
      },
      {
        "children": [],
        "content": "/**\n * @brief Convert a Color enum to its string representation\n * @param color The Color to convert\n * @return String representation of the color\n */",
        "end_column": 3,
        "end_line": 106,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 102,
        "type": "DOCSTRING"
      },
      {
        "children": [],
        "content": "/**\n * @brief Program entry point\n * @return Exit status code\n */",
        "end_column": 3,
        "end_line": 122,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 119,
        "type": "DOCSTRING"
      },
      {
        "children": [],
        "content": "// Using enumerations",
        "end_column": 21,
        "end_line": 124,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 124,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Using structures",
        "end_column": 19,
        "end_line": 131,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 131,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Using nested structures",
        "end_column": 26,
        "end_line": 139,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 139,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Using typedef structures",
        "end_column": 27,
        "end_line": 152,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 152,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Using bit fields",
        "end_column": 19,
        "end_line": 165,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 165,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Using unions",
        "end_column": 15,
        "end_line": 173,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 173,
        "type": "COMMENT"
      },
      {
        "children": [],
        "content": "// Using structure with union",
        "end_column": 29,
        "end_line": 185,
        "name": "",
        "qualified_name": "",
        "start_column": 1,
        "start_line": 185,
        "type": "COMMENT"
      },
      {
        "children": [],
        "end_column": 1,
        "end_line": 1487,
        "name": "main",
        "qualified_name": "main",
        "start_column": 1,
        "start_line": 802,
        "type": "FUNCTION"
      }
    ],
    "end_column": 1,
    "end_line": 195,
    "name": "complex_data_types.c",
    "qualified_name": "complex_data_types.c",
    "start_column": 1,
    "start_line": 1,
    "type": "ROOT"
  },
  "cst": {
    "children": [
      {
        "children": [],
        "end_column": 18,
        "end_line": 14,
        "start_column": 1,
        "start_line": 14,
        "text": "#include <stdio.h>",
        "type": "include_directive"
      },
      {
        "children": [],
        "end_column": 19,
        "end_line": 15,
        "start_column": 1,
        "start_line": 15,
        "text": "#include <string.h>",
        "type": "include_directive"
      },
      {
        "children": [],
        "end_column": 19,
        "end_line": 16,
        "start_column": 1,
        "start_line": 16,
        "text": "#include <stdlib.h>",
        "type": "include_directive"
      },
      {
        "children": [
          {
            "children": [],
            "text": "// Using enumerations",
            "type": "statement"
          },
          {
            "children": [],
            "text": "enum Color background = BLUE;",
            "type": "statement"
          },
          {
            "children": [],
            "text": "Weekday today = WEDNESDAY;",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Background color: %s (value: %d)\\n\", color_to_string(background), background);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Today is day %d of the week\\n\", today);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "// Using structures",
            "type": "statement"
          },
          {
            "children": [],
            "text": "struct Point p1 = {10, 20};",
            "type": "statement"
          },
          {
            "children": [],
            "text": "struct Point p2 = {.y = 5, .x = 15}; // Designated initializers",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"\\nPoints:\\n\");",
            "type": "statement"
          },
          {
            "children": [],
            "text": "print_point(p1);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "print_point(p2);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "// Using nested structures",
            "type": "statement"
          },
          {
            "children": [],
            "text": "struct Rectangle rect = {",
            "type": "statement"
          },
          {
            "children": [],
            "text": ".topLeft = {0, 0},",
            "type": "statement"
          },
          {
            "children": [],
            "text": ".bottomRight = {5, 10}",
            "type": "statement"
          },
          {
            "children": [],
            "text": "};",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"\\nRectangle:\\n\");",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Top-left: \");",
            "type": "statement"
          },
          {
            "children": [],
            "text": "print_point(rect.topLeft);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Bottom-right: \");",
            "type": "statement"
          },
          {
            "children": [],
            "text": "print_point(rect.bottomRight);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Area: %d\\n\", rectangle_area(rect));",
            "type": "statement"
          },
          {
            "children": [],
            "text": "// Using typedef structures",
            "type": "statement"
          },
          {
            "children": [],
            "text": "Book book1;",
            "type": "statement"
          },
          {
            "children": [],
            "text": "strcpy(book1.title, \"C Programming\");",
            "type": "statement"
          },
          {
            "children": [],
            "text": "strcpy(book1.author, \"Dennis Ritchie\");",
            "type": "statement"
          },
          {
            "children": [],
            "text": "book1.year = 1978;",
            "type": "statement"
          },
          {
            "children": [],
            "text": "book1.price = 29.99;",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"\\nBook:\\n\");",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Title: %s\\n\", book1.title);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Author: %s\\n\", book1.author);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Year: %d\\n\", book1.year);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Price: $%.2f\\n\", book1.price);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "// Using bit fields",
            "type": "statement"
          },
          {
            "children": [],
            "text": "Flags user_flags = {1, 5, 10};",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"\\nUser flags:\\n\");",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Active: %d\\n\", user_flags.is_active);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Permission: %d\\n\", user_flags.permission);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"User level: %d\\n\", user_flags.user_level);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "// Using unions",
            "type": "statement"
          },
          {
            "children": [],
            "text": "union Data data;",
            "type": "statement"
          },
          {
            "children": [],
            "text": "data.i = 10;",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"\\nUnion as int: %d\\n\", data.i);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "data.f = 220.5;",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Union as float: %.1f\\n\", data.f);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "strcpy(data.str, \"C Programming\");",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Union as string: %s\\n\", data.str);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "// Using structure with union",
            "type": "statement"
          },
          {
            "children": [],
            "text": "ColoredValue cv = {RED, .value.i_value = 100};",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"\\nColored value:\\n\");",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Color: %s\\n\", color_to_string(cv.color));",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Integer value: %d\\n\", cv.value.i_value);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "cv.value.f_value = 99.9;",
            "type": "statement"
          },
          {
            "children": [],
            "text": "printf(\"Float value (same memory): %f\\n\", cv.value.f_value);",
            "type": "statement"
          },
          {
            "children": [],
            "text": "return 0;",
            "type": "statement"
          }
        ],
        "end_column": 1,
        "end_line": 195,
        "name": "main",
        "start_column": 1,
        "start_line": 123,
        "text": "int main() {\n    // Using enumerations\n    enum Color background = BLUE;\n    Weekday today = WEDNESDAY;\n    \n    printf(\"Background color: %s (value: %d)\\n\", color_to_string(background), background);\n    printf(\"Today is day %d of the week\\n\", today);\n    \n    // Using structures\n    struct Point p1 = {10, 20};\n    struct Point p2 = {.y = 5, .x = 15}; // Designated initializers\n    \n    printf(\"\\nPoints:\\n\");\n    print_point(p1);\n    print_point(p2);\n    \n    // Using nested structures\n    struct Rectangle rect = {\n        .topLeft = {0, 0},\n        .bottomRight = {5, 10}\n    };\n    \n    printf(\"\\nRectangle:\\n\");\n    printf(\"Top-left: \");\n    print_point(rect.topLeft);\n    printf(\"Bottom-right: \");\n    print_point(rect.bottomRight);\n    printf(\"Area: %d\\n\", rectangle_area(rect));\n    \n    // Using typedef structures\n    Book book1;\n    strcpy(book1.title, \"C Programming\");\n    strcpy(book1.author, \"Dennis Ritchie\");\n    book1.year = 1978;\n    book1.price = 29.99;\n    \n    printf(\"\\nBook:\\n\");\n    printf(\"Title: %s\\n\", book1.title);\n    printf(\"Author: %s\\n\", book1.author);\n    printf(\"Year: %d\\n\", book1.year);\n    printf(\"Price: $%.2f\\n\", book1.price);\n    \n    // Using bit fields\n    Flags user_flags = {1, 5, 10};\n    \n    printf(\"\\nUser flags:\\n\");\n    printf(\"Active: %d\\n\", user_flags.is_active);\n    printf(\"Permission: %d\\n\", user_flags.permission);\n    printf(\"User level: %d\\n\", user_flags.user_level);\n    \n    // Using unions\n    union Data data;\n    \n    data.i = 10;\n    printf(\"\\nUnion as int: %d\\n\", data.i);\n    \n    data.f = 220.5;\n    printf(\"Union as float: %.1f\\n\", data.f);\n    \n    strcpy(data.str, \"C Programming\");\n    printf(\"Union as string: %s\\n\", data.str);\n    \n    // Using structure with union\n    ColoredValue cv = {RED, .value.i_value = 100};\n    printf(\"\\nColored value:\\n\");\n    printf(\"Color: %s\\n\", color_to_string(cv.color));\n    printf(\"Integer value: %d\\n\", cv.value.i_value);\n    \n    cv.value.f_value = 99.9;\n    printf(\"Float value (same memory): %f\\n\", cv.value.f_value);\n    \n    return 0;\n}",
        "type": "function_definition"
      },
      {
        "children": [],
        "end_column": 3,
        "end_line": 12,
        "start_column": 1,
        "start_line": 1,
        "text": "/**\n * @file complex_data_types.c\n * @brief Demonstration of structures, unions, and enumerations in C\n *\n * This example shows:\n * - Structure definitions and usage\n * - Nested structures\n * - Unions\n * - Enumerations\n * - Typedef\n * - Bit fields\n */",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 21,
        "end_line": 18,
        "start_column": 1,
        "start_line": 18,
        "text": "// Simple enumeration",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 27,
        "end_line": 28,
        "start_column": 1,
        "start_line": 28,
        "text": "// Enumeration with typedef",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 19,
        "end_line": 39,
        "start_column": 1,
        "start_line": 39,
        "text": "// Simple structure",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 25,
        "end_line": 45,
        "start_column": 1,
        "start_line": 45,
        "text": "// Structure with typedef",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 19,
        "end_line": 53,
        "start_column": 1,
        "start_line": 53,
        "text": "// Nested structure",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 28,
        "end_line": 59,
        "start_column": 1,
        "start_line": 59,
        "text": "// Structure with bit fields",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 16,
        "end_line": 66,
        "start_column": 1,
        "start_line": 66,
        "text": "// Union example",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 31,
        "end_line": 73,
        "start_column": 1,
        "start_line": 73,
        "text": "// Structure containing a union",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 3,
        "end_line": 86,
        "start_column": 1,
        "start_line": 83,
        "text": "/**\n * @brief Print details about a Point structure\n * @param p The Point to print\n */",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 3,
        "end_line": 95,
        "start_column": 1,
        "start_line": 91,
        "text": "/**\n * @brief Calculate the area of a Rectangle\n * @param rect The Rectangle to calculate the area of\n * @return The area of the rectangle\n */",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 3,
        "end_line": 106,
        "start_column": 1,
        "start_line": 102,
        "text": "/**\n * @brief Convert a Color enum to its string representation\n * @param color The Color to convert\n * @return String representation of the color\n */",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 3,
        "end_line": 122,
        "start_column": 1,
        "start_line": 119,
        "text": "/**\n * @brief Program entry point\n * @return Exit status code\n */",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 21,
        "end_line": 124,
        "start_column": 1,
        "start_line": 124,
        "text": "// Using enumerations",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 19,
        "end_line": 131,
        "start_column": 1,
        "start_line": 131,
        "text": "// Using structures",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 26,
        "end_line": 139,
        "start_column": 1,
        "start_line": 139,
        "text": "// Using nested structures",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 27,
        "end_line": 152,
        "start_column": 1,
        "start_line": 152,
        "text": "// Using typedef structures",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 19,
        "end_line": 165,
        "start_column": 1,
        "start_line": 165,
        "text": "// Using bit fields",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 15,
        "end_line": 173,
        "start_column": 1,
        "start_line": 173,
        "text": "// Using unions",
        "type": "comment"
      },
      {
        "children": [],
        "end_column": 29,
        "end_line": 185,
        "start_column": 1,
        "start_line": 185,
        "text": "// Using structure with union",
        "type": "comment"
      }
    ],
    "end_column": 1,
    "end_line": 195,
    "start_column": 1,
    "start_line": 1,
    "type": "translation_unit"
  },
  "language": "C"
}