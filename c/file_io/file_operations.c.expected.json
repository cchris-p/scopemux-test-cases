{
  "language": "C",
  "ast": {
    "type": "translation_unit",
    "functions": [
      {
        "name": "demonstrate_file_open_close",
        "type": "function_definition",
        "parameters": [],
        "return_type": "void",
        "body_range": {
          "start_line": 23,
          "start_column": 0,
          "end_line": 63,
          "end_column": 1
        },
        "docstring": "Demonstrate basic file opening and closing"
      },
      {
        "name": "demonstrate_character_io",
        "type": "function_definition",
        "parameters": [],
        "return_type": "void",
        "body_range": {
          "start_line": 68,
          "start_column": 0,
          "end_line": 108,
          "end_column": 1
        },
        "docstring": "Demonstrate character-by-character file reading"
      },
      {
        "name": "demonstrate_line_io",
        "type": "function_definition",
        "parameters": [],
        "return_type": "void",
        "body_range": {
          "start_line": 113,
          "start_column": 0,
          "end_line": 154,
          "end_column": 1
        },
        "docstring": "Demonstrate line-by-line file reading"
      },
      {
        "name": "demonstrate_formatted_io",
        "type": "function_definition",
        "parameters": [],
        "return_type": "void",
        "body_range": {
          "start_line": 159,
          "start_column": 0,
          "end_line": 221,
          "end_column": 1
        },
        "docstring": "Demonstrate formatted I/O with files"
      },
      {
        "name": "demonstrate_binary_io",
        "type": "function_definition",
        "parameters": [],
        "return_type": "void",
        "body_range": {
          "start_line": 234,
          "start_column": 0,
          "end_line": 282,
          "end_column": 1
        },
        "docstring": "Demonstrate binary I/O with files"
      },
      {
        "name": "demonstrate_file_positioning",
        "type": "function_definition",
        "parameters": [],
        "return_type": "void",
        "body_range": {
          "start_line": 287,
          "start_column": 0,
          "end_line": 366,
          "end_column": 1
        },
        "docstring": "Demonstrate file positioning with fseek, ftell, and rewind"
      },
      {
        "name": "demonstrate_error_handling",
        "type": "function_definition",
        "parameters": [],
        "return_type": "void",
        "body_range": {
          "start_line": 371,
          "start_column": 0,
          "end_line": 434,
          "end_column": 1
        },
        "docstring": "Demonstrate error handling with file operations"
      },
      {
        "name": "demonstrate_temporary_files",
        "type": "function_definition",
        "parameters": [],
        "return_type": "void",
        "body_range": {
          "start_line": 439,
          "start_column": 0,
          "end_line": 480,
          "end_column": 1
        },
        "docstring": "Demonstrate temporary files"
      },
      {
        "name": "demonstrate_file_buffering",
        "type": "function_definition",
        "parameters": [],
        "return_type": "void",
        "body_range": {
          "start_line": 485,
          "start_column": 0,
          "end_line": 538,
          "end_column": 1
        },
        "docstring": "Demonstrate file buffering control"
      },
      {
        "name": "cleanup_files",
        "type": "function_definition",
        "parameters": [],
        "return_type": "void",
        "body_range": {
          "start_line": 543,
          "start_column": 0,
          "end_line": 557,
          "end_column": 1
        },
        "docstring": "Clean up files created during the demonstration"
      },
      {
        "name": "main",
        "type": "function_definition",
        "parameters": [],
        "return_type": "int",
        "body_range": {
          "start_line": 559,
          "start_column": 0,
          "end_line": 572,
          "end_column": 1
        }
      }
    ],
    "structs": [
      {
        "name": "Record",
        "members": [
          {"name": "id", "type": "int"},
          {"name": "value", "type": "double"},
          {"name": "name", "type": "char[20]"}
        ],
        "range": {
          "start_line": 227,
          "start_column": 0,
          "end_line": 231,
          "end_column": 1
        }
      }
    ],
    "typedefs": [
      {
        "name": "Record",
        "target_type": "struct { int id; double value; char name[20]; }",
        "line": 231
      }
    ],
    "includes": [
      {"name": "stdio.h", "system": true, "line": 11},
      {"name": "stdlib.h", "system": true, "line": 12},
      {"name": "string.h", "system": true, "line": 13},
      {"name": "errno.h", "system": true, "line": 14}
    ],
    "macros": [
      {"name": "BUFFER_SIZE", "value": "1024", "line": 16},
      {"name": "TEST_FILENAME", "value": "\"test_file.txt\"", "line": 17},
      {"name": "TEST_BINARY_FILENAME", "value": "\"test_binary.dat\"", "line": 18}
    ],
    "docstrings": [
      {
        "type": "file_docstring",
        "text": "Demonstration of File I/O in C\n\nThis example covers:\n- Opening and closing files\n- Reading from files (character, line, and binary reads)\n- Writing to files (formatted, character, and binary writes)\n- File positioning (seeking)\n- Error handling with file operations\n- Temporary files\n- File buffering control",
        "range": {
          "start_line": 1,
          "start_column": 0,
          "end_line": 10,
          "end_column": 3
        }
      }
    ],
    "file_operations": [
      {
        "operation": "file_open",
        "examples": [
          {"line": 27, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"w\""},
          {"line": 46, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"r\""},
          {"line": 71, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"w\""},
          {"line": 87, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"r\""},
          {"line": 116, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"w\""},
          {"line": 131, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"r\""},
          {"line": 162, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"w\""},
          {"line": 184, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"r\""},
          {"line": 240, "function": "fopen", "filename": "TEST_BINARY_FILENAME", "mode": "\"wb\""},
          {"line": 255, "function": "fopen", "filename": "TEST_BINARY_FILENAME", "mode": "\"rb\""},
          {"line": 290, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"w\""},
          {"line": 304, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"r+\""},
          {"line": 374, "function": "fopen", "filename": "\"non_existent_file.txt\"", "mode": "\"r\""},
          {"line": 387, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"w\""},
          {"line": 392, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"x\""},
          {"line": 405, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"r\""},
          {"line": 442, "function": "tmpfile", "mode": "temporary"},
          {"line": 488, "function": "fopen", "filename": "TEST_FILENAME", "mode": "\"w\""}
        ]
      },
      {
        "operation": "file_close",
        "examples": [
          {"line": 36, "function": "fclose", "error_checking": true},
          {"line": 55, "function": "fclose", "error_checking": true},
          {"line": 84, "function": "fclose", "error_checking": false},
          {"line": 106, "function": "fclose", "error_checking": false},
          {"line": 128, "function": "fclose", "error_checking": false},
          {"line": 152, "function": "fclose", "error_checking": false},
          {"line": 181, "function": "fclose", "error_checking": false},
          {"line": 219, "function": "fclose", "error_checking": false},
          {"line": 252, "function": "fclose", "error_checking": false},
          {"line": 280, "function": "fclose", "error_checking": false},
          {"line": 302, "function": "fclose", "error_checking": false},
          {"line": 364, "function": "fclose", "error_checking": false},
          {"line": 382, "function": "fclose", "error_checking": false},
          {"line": 389, "function": "fclose", "error_checking": false},
          {"line": 401, "function": "fclose", "error_checking": false},
          {"line": 432, "function": "fclose", "error_checking": false},
          {"line": 465, "function": "fclose", "error_checking": false},
          {"line": 536, "function": "fclose", "error_checking": false}
        ]
      },
      {
        "operation": "character_io",
        "examples": [
          {"line": 77, "function": "fputc", "error_checking": true},
          {"line": 94, "function": "fgetc", "error_checking": false}
        ]
      },
      {
        "operation": "line_io",
        "examples": [
          {"line": 121, "function": "fputs", "error_checking": false},
          {"line": 122, "function": "fputs", "error_checking": false},
          {"line": 123, "function": "fputs", "error_checking": false},
          {"line": 124, "function": "fputs", "error_checking": false},
          {"line": 141, "function": "fgets", "error_checking": true}
        ]
      },
      {
        "operation": "formatted_io",
        "examples": [
          {"line": 32, "function": "fprintf", "error_checking": false},
          {"line": 33, "function": "fprintf", "error_checking": false},
          {"line": 172, "function": "fprintf", "error_checking": false},
          {"line": 173, "function": "fprintf", "error_checking": false},
          {"line": 174, "function": "fprintf", "error_checking": false},
          {"line": 177, "function": "fprintf", "error_checking": false},
          {"line": 178, "function": "fprintf", "error_checking": false},
          {"line": 179, "function": "fprintf", "error_checking": false},
          {"line": 180, "function": "fprintf", "error_checking": false},
          {"line": 194, "function": "fscanf", "error_checking": false},
          {"line": 195, "function": "fscanf", "error_checking": false},
          {"line": 196, "function": "fscanf", "error_checking": false}
        ]
      },
      {
        "operation": "binary_io",
        "examples": [
          {"line": 248, "function": "fwrite", "error_checking": false},
          {"line": 251, "function": "fwrite", "error_checking": false},
          {"line": 262, "function": "fread", "error_checking": false},
          {"line": 265, "function": "fread", "error_checking": false}
        ]
      },
      {
        "operation": "file_positioning",
        "examples": [
          {"line": 313, "function": "ftell", "error_checking": false},
          {"line": 322, "function": "ftell", "error_checking": false},
          {"line": 329, "function": "ftell", "error_checking": false},
          {"line": 332, "function": "rewind", "error_checking": false},
          {"line": 333, "function": "ftell", "error_checking": false},
          {"line": 342, "function": "ftell", "error_checking": false},
          {"line": 348, "function": "fseek", "parameters": "0, SEEK_END", "error_checking": false},
          {"line": 349, "function": "ftell", "error_checking": false},
          {"line": 356, "function": "fseek", "parameters": "offset, SEEK_END", "error_checking": false}
        ]
      },
      {
        "operation": "error_handling",
        "examples": [
          {"line": 28, "function": "NULL check", "error_checking": true},
          {"line": 36, "function": "fclose return check", "error_checking": true},
          {"line": 47, "function": "NULL check", "error_checking": true},
          {"line": 55, "function": "fclose return check", "error_checking": true},
          {"line": 72, "function": "NULL check", "error_checking": true},
          {"line": 77, "function": "EOF check", "error_checking": true},
          {"line": 88, "function": "NULL check", "error_checking": true},
          {"line": 117, "function": "NULL check", "error_checking": true},
          {"line": 132, "function": "NULL check", "error_checking": true},
          {"line": 163, "function": "NULL check", "error_checking": true},
          {"line": 185, "function": "NULL check", "error_checking": true},
          {"line": 241, "function": "NULL check", "error_checking": true},
          {"line": 256, "function": "NULL check", "error_checking": true},
          {"line": 291, "function": "NULL check", "error_checking": true},
          {"line": 305, "function": "NULL check", "error_checking": true},
          {"line": 375, "function": "NULL check", "error_checking": true},
          {"line": 388, "function": "NULL check", "error_checking": true},
          {"line": 393, "function": "NULL check", "error_checking": true},
          {"line": 406, "function": "NULL check", "error_checking": true},
          {"line": 413, "function": "EOF check", "error_checking": true},
          {"line": 416, "function": "ferror", "error_checking": true},
          {"line": 417, "function": "clearerr", "error_checking": false},
          {"line": 419, "function": "ferror", "error_checking": true},
          {"line": 443, "function": "NULL check", "error_checking": true},
          {"line": 460, "function": "NULL check", "error_checking": true},
          {"line": 489, "function": "NULL check", "error_checking": true},
          {"line": 498, "function": "setvbuf return check", "error_checking": true},
          {"line": 505, "function": "setvbuf return check", "error_checking": true},
          {"line": 512, "function": "setvbuf return check", "error_checking": true},
          {"line": 523, "function": "setvbuf return check", "error_checking": true}
        ]
      },
      {
        "operation": "file_remove",
        "examples": [
          {"line": 545, "function": "remove", "error_checking": true},
          {"line": 551, "function": "remove", "error_checking": true}
        ]
      },
      {
        "operation": "buffering_control",
        "examples": [
          {"line": 498, "function": "setvbuf", "parameters": "NULL, _IONBF, 0", "error_checking": true},
          {"line": 505, "function": "setvbuf", "parameters": "NULL, _IOLBF, BUFSIZ", "error_checking": true},
          {"line": 512, "function": "setvbuf", "parameters": "NULL, _IOFBF, BUFSIZ", "error_checking": true},
          {"line": 519, "function": "fflush", "error_checking": false},
          {"line": 523, "function": "setvbuf", "parameters": "custom_buffer, _IOFBF, BUFFER_SIZE", "error_checking": true}
        ]
      },
      {
        "operation": "temporary_files",
        "examples": [
          {"line": 442, "function": "tmpfile", "error_checking": true},
          {"line": 460, "function": "tmpnam", "error_checking": true}
        ]
      }
    ],
    "function_calls": [
      {
        "name": "demonstrate_file_open_close",
        "arguments": [],
        "line": 562
      },
      {
        "name": "demonstrate_character_io",
        "arguments": [],
        "line": 563
      },
      {
        "name": "demonstrate_line_io",
        "arguments": [],
        "line": 564
      },
      {
        "name": "demonstrate_formatted_io",
        "arguments": [],
        "line": 565
      },
      {
        "name": "demonstrate_binary_io",
        "arguments": [],
        "line": 566
      },
      {
        "name": "demonstrate_file_positioning",
        "arguments": [],
        "line": 567
      },
      {
        "name": "demonstrate_error_handling",
        "arguments": [],
        "line": 568
      },
      {
        "name": "demonstrate_temporary_files",
        "arguments": [],
        "line": 569
      },
      {
        "name": "demonstrate_file_buffering",
        "arguments": [],
        "line": 570
      },
      {
        "name": "cleanup_files",
        "arguments": [],
        "line": 572
      }
    ],
    "error_handling_patterns": [
      {
        "pattern": "file_open_error_check",
        "examples": [
          {"line": 28, "code": "if (file == NULL) { printf(\"Error opening file for writing: %s\\n\", strerror(errno)); return; }"},
          {"line": 47, "code": "if (file == NULL) { printf(\"Error opening file for reading: %s\\n\", strerror(errno)); return; }"},
          {"line": 72, "code": "if (file == NULL) { printf(\"Error opening file: %s\\n\", strerror(errno)); return; }"}
        ]
      },
      {
        "pattern": "file_operation_error_check",
        "examples": [
          {"line": 36, "code": "if (fclose(file) != 0) { printf(\"Error closing file: %s\\n\", strerror(errno)); return; }"},
          {"line": 77, "code": "if (fputc(text[i], file) == EOF) { printf(\"Error writing character: %s\\n\", strerror(errno)); fclose(file); return; }"},
          {"line": 416, "code": "if (ferror(file)) { printf(\"  ferror indicates an error occurred\\n\"); clearerr(file); printf(\"  Error cleared with clearerr\\n\"); }"}
        ]
      },
      {
        "pattern": "errno_usage",
        "examples": [
          {"line": 29, "code": "printf(\"Error opening file for writing: %s\\n\", strerror(errno));"},
          {"line": 48, "code": "printf(\"Error opening file for reading: %s\\n\", strerror(errno));"},
          {"line": 378, "code": "printf(\"  errno: %d\\n\", errno);"},
          {"line": 379, "code": "printf(\"  error message: %s\\n\", strerror(errno));"},
          {"line": 380, "code": "perror(\"  perror message\");"}
        ]
      }
    ]
  }
}
