{
  "language": "C",
  "ast": {
    "type": "translation_unit",
    "functions": [
      {
        "name": "main",
        "type": "function_definition",
        "return_type": "int",
        "parameters": [],
        "body_range": {
          "start_line": 17,
          "start_column": 0,
          "end_line": 110,
          "end_column": 1
        },
        "docstring": "Program entry point\nReturn Exit status code"
      }
    ],
    "includes": [
      {
        "path": "stdio.h",
        "system": true,
        "line": 11
      },
      {
        "path": "stdbool.h",
        "system": true,
        "line": 12
      }
    ],
    "comments": [
      {
        "type": "block_comment",
        "text": "This example shows:\n- Deeply nested if/else structures\n- Nested loops (for, while)\n- The use of goto statements for control flow\n- Break and continue statements",
        "range": {
          "start_line": 1,
          "start_column": 0,
          "end_line": 9,
          "end_column": 3
        }
      },
      {
        "type": "block_comment",
        "text": "Program entry point\nReturn Exit status code",
        "range": {
          "start_line": 14,
          "start_column": 0,
          "end_line": 17,
          "end_column": 3
        }
      },
      {
        "type": "line_comment",
        "text": "Example 1: Nested loops with break",
        "line": 21
      },
      {
        "type": "line_comment",
        "text": "Example 2: Goto for error handling",
        "line": 47
      },
      {
        "type": "line_comment",
        "text": "Simulating an initialization sequence with error handling",
        "line": 52
      },
      {
        "type": "line_comment",
        "text": "Imagine more steps here...",
        "line": 67
      },
      {
        "type": "line_comment",
        "text": "Normal exit point",
        "line": 70
      },
      {
        "type": "line_comment",
        "text": "Cleanup code runs regardless of how we reached this point",
        "line": 75
      },
      {
        "type": "line_comment",
        "text": "Example 3: Complex nested conditions",
        "line": 78
      }
    ],
    "variable_declarations": [
      {
        "name": "i",
        "type": "int",
        "line": 18,
        "initialized": false
      },
      {
        "name": "j",
        "type": "int",
        "line": 18,
        "initialized": false
      },
      {
        "name": "k",
        "type": "int",
        "line": 18,
        "initialized": false
      },
      {
        "name": "found",
        "type": "bool",
        "line": 19,
        "initialized": true
      },
      {
        "name": "result",
        "type": "int",
        "line": 50,
        "initialized": true
      },
      {
        "name": "data",
        "type": "int*",
        "line": 51,
        "initialized": true
      },
      {
        "name": "a",
        "type": "int",
        "line": 80,
        "initialized": true
      },
      {
        "name": "b",
        "type": "int",
        "line": 80,
        "initialized": true
      },
      {
        "name": "c",
        "type": "int",
        "line": 80,
        "initialized": true
      }
    ],
    "loops": [
      {
        "type": "for_statement",
        "range": {
          "start_line": 23,
          "start_column": 4,
          "end_line": 44,
          "end_column": 5
        }
      },
      {
        "type": "for_statement",
        "range": {
          "start_line": 26,
          "start_column": 8,
          "end_line": 40,
          "end_column": 9
        }
      },
      {
        "type": "for_statement",
        "range": {
          "start_line": 29,
          "start_column": 12,
          "end_line": 36,
          "end_column": 13
        }
      }
    ],
    "conditionals": [
      {
        "type": "if_statement",
        "range": {
          "start_line": 32,
          "start_column": 16,
          "end_line": 35,
          "end_column": 17
        }
      },
      {
        "type": "if_statement",
        "range": {
          "start_line": 38,
          "start_column": 12,
          "end_line": 41,
          "end_column": 13
        }
      },
      {
        "type": "if_statement",
        "range": {
          "start_line": 43,
          "start_column": 8,
          "end_line": 46,
          "end_column": 9
        }
      },
      {
        "type": "if_statement",
        "range": {
          "start_line": 53,
          "start_column": 4,
          "end_line": 56,
          "end_column": 5
        }
      },
      {
        "type": "if_statement",
        "range": {
          "start_line": 60,
          "start_column": 4,
          "end_line": 64,
          "end_column": 5
        }
      },
      {
        "type": "if_statement",
        "range": {
          "start_line": 82,
          "start_column": 4,
          "end_line": 106,
          "end_column": 5
        }
      },
      {
        "type": "if_statement",
        "range": {
          "start_line": 85,
          "start_column": 8,
          "end_line": 103,
          "end_column": 9
        }
      },
      {
        "type": "if_statement",
        "range": {
          "start_line": 88,
          "start_column": 12,
          "end_line": 100,
          "end_column": 13
        }
      },
      {
        "type": "if_statement",
        "range": {
          "start_line": 92,
          "start_column": 16,
          "end_line": 96,
          "end_column": 17
        }
      }
    ],
    "goto_statements": [
      {
        "label": "cleanup",
        "line": 55
      },
      {
        "label": "cleanup",
        "line": 63
      }
    ],
    "labels": [
      {
        "name": "cleanup",
        "line": 74
      }
    ],
    "function_calls": [
      {
        "name": "printf",
        "arguments": [
          "\"Example 1: Nested loops with break\\n\""
        ],
        "line": 22
      },
      {
        "name": "printf",
        "arguments": [
          "\"Outer loop i=%d\\n\"",
          "i"
        ],
        "line": 24
      },
      {
        "name": "printf",
        "arguments": [
          "\"  Middle loop j=%d\\n\"",
          "j"
        ],
        "line": 27
      },
      {
        "name": "printf",
        "arguments": [
          "\"    Inner loop k=%d\\n\"",
          "k"
        ],
        "line": 30
      },
      {
        "name": "printf",
        "arguments": [
          "\"    Found target values! Breaking inner loop\\n\""
        ],
        "line": 33
      },
      {
        "name": "printf",
        "arguments": [
          "\"  Breaking middle loop\\n\""
        ],
        "line": 39
      },
      {
        "name": "printf",
        "arguments": [
          "\"Breaking outer loop\\n\""
        ],
        "line": 44
      },
      {
        "name": "printf",
        "arguments": [
          "\"\\nExample 2: Goto for error handling\\n\""
        ],
        "line": 48
      },
      {
        "name": "printf",
        "arguments": [
          "\"Step 1 failed\\n\""
        ],
        "line": 54
      },
      {
        "name": "printf",
        "arguments": [
          "\"Step 1 succeeded\\n\""
        ],
        "line": 58
      },
      {
        "name": "printf",
        "arguments": [
          "\"Step 2 failed\\n\""
        ],
        "line": 61
      },
      {
        "name": "printf",
        "arguments": [
          "\"Step 2 succeeded\\n\""
        ],
        "line": 65
      },
      {
        "name": "printf",
        "arguments": [
          "\"All steps completed successfully\\n\""
        ],
        "line": 71
      },
      {
        "name": "printf",
        "arguments": [
          "\"Performing cleanup (result=%d)\\n\"",
          "result"
        ],
        "line": 76
      },
      {
        "name": "printf",
        "arguments": [
          "\"\\nExample 3: Complex nested conditions\\n\""
        ],
        "line": 79
      },
      {
        "name": "printf",
        "arguments": [
          "\"a < 10\\n\""
        ],
        "line": 83
      },
      {
        "name": "printf",
        "arguments": [
          "\"  b > 5\\n\""
        ],
        "line": 86
      },
      {
        "name": "printf",
        "arguments": [
          "\"    c > 20\\n\""
        ],
        "line": 89
      },
      {
        "name": "printf",
        "arguments": [
          "\"    c > 10\\n\""
        ],
        "line": 91
      },
      {
        "name": "printf",
        "arguments": [
          "\"      a + b > c\\n\""
        ],
        "line": 94
      },
      {
        "name": "printf",
        "arguments": [
          "\"      a + b <= c\\n\""
        ],
        "line": 96
      },
      {
        "name": "printf",
        "arguments": [
          "\"    c <= 10\\n\""
        ],
        "line": 99
      },
      {
        "name": "printf",
        "arguments": [
          "\"  b <= 5\\n\""
        ],
        "line": 102
      },
      {
        "name": "printf",
        "arguments": [
          "\"a >= 10\\n\""
        ],
        "line": 105
      }
    ]
  }
}
