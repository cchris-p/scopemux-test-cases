{
  "language": "Python",
  "ast": {
    "type": "module",
    "classes": [
      {
        "name": "Rectangle",
        "type": "class_definition",
        "decorators": ["dataclass"],
        "methods": [
          {
            "name": "area",
            "type": "method",
            "parameters": ["self"],
            "return_type": "float",
            "body_range": {
              "start_line": 26,
              "start_column": 4,
              "end_line": 30,
              "end_column": 20
            },
            "docstring": "Calculate the area of the rectangle"
          },
          {
            "name": "__str__",
            "type": "method",
            "parameters": ["self"],
            "return_type": "str",
            "body_range": {
              "start_line": 32,
              "start_column": 4,
              "end_line": 33,
              "end_column": 69
            }
          }
        ],
        "fields": [
          {"name": "top_left", "type": "Point", "line": 24},
          {"name": "bottom_right", "type": "Point", "line": 25}
        ],
        "range": {
          "start_line": 19,
          "start_column": 0,
          "end_line": 33,
          "end_column": 69
        },
        "docstring": "A rectangle defined by its top-left and bottom-right corners"
      },
      {
        "name": "Person",
        "type": "class_definition",
        "methods": [
          {
            "name": "__init__",
            "type": "method",
            "parameters": ["self", "name: str", "age: int"],
            "body_range": {
              "start_line": 41,
              "start_column": 4,
              "end_line": 44,
              "end_column": 32
            }
          },
          {
            "name": "add_friend",
            "type": "method",
            "parameters": ["self", "friend: 'Person'"],
            "return_type": "None",
            "body_range": {
              "start_line": 46,
              "start_column": 4,
              "end_line": 48,
              "end_column": 30
            },
            "docstring": "Add a friend to this person's friend list"
          },
          {
            "name": "__repr__",
            "type": "method",
            "parameters": ["self"],
            "return_type": "str",
            "body_range": {
              "start_line": 50,
              "start_column": 4,
              "end_line": 51,
              "end_column": 52
            }
          },
          {
            "name": "__str__",
            "type": "method",
            "parameters": ["self"],
            "return_type": "str",
            "body_range": {
              "start_line": 53,
              "start_column": 4,
              "end_line": 54,
              "end_column": 50
            }
          }
        ],
        "fields": [
          {"name": "name", "type": "str", "line": 42},
          {"name": "age", "type": "int", "line": 43},
          {"name": "friends", "type": "List['Person']", "line": 44}
        ],
        "range": {
          "start_line": 37,
          "start_column": 0,
          "end_line": 54,
          "end_column": 50
        },
        "docstring": "A person with a name, age, and a list of friends"
      }
    ],
    "functions": [
      {
        "name": "demonstrate_basic_containers",
        "type": "function_definition",
        "parameters": [],
        "body_range": {
          "start_line": 57,
          "start_column": 0,
          "end_line": 83,
          "end_column": 63
        },
        "docstring": "Demonstrate Python's basic container types"
      },
      {
        "name": "demonstrate_nested_structures",
        "type": "function_definition",
        "parameters": [],
        "body_range": {
          "start_line": 86,
          "start_column": 0,
          "end_line": 131,
          "end_column": 93
        },
        "docstring": "Demonstrate nested data structures"
      },
      {
        "name": "demonstrate_specialized_containers",
        "type": "function_definition",
        "parameters": [],
        "body_range": {
          "start_line": 134,
          "start_column": 0,
          "end_line": 156,
          "end_column": 77
        },
        "docstring": "Demonstrate specialized containers from the collections module"
      },
      {
        "name": "demonstrate_custom_classes",
        "type": "function_definition",
        "parameters": [],
        "body_range": {
          "start_line": 159,
          "start_column": 0,
          "end_line": 188,
          "end_column": 79
        },
        "docstring": "Demonstrate custom classes and their usage in data structures"
      },
      {
        "name": "demonstrate_type_annotations",
        "type": "function_definition",
        "parameters": [],
        "body_range": {
          "start_line": 191,
          "start_column": 0,
          "end_line": 208,
          "end_column": 76
        },
        "docstring": "Demonstrate type annotations for complex structures"
      },
      {
        "name": "main",
        "type": "function_definition",
        "parameters": [],
        "body_range": {
          "start_line": 211,
          "start_column": 0,
          "end_line": 221,
          "end_column": 32
        },
        "docstring": "Main function to run all demonstrations"
      }
    ],
    "imports": [
      {
        "name": "typing",
        "symbols": ["List", "Dict", "Set", "Tuple", "Optional", "Union", "Any"],
        "line": 9
      },
      {
        "name": "collections",
        "symbols": ["defaultdict", "Counter", "deque", "namedtuple"],
        "line": 10
      },
      {
        "name": "dataclasses",
        "symbols": ["dataclass"],
        "line": 11
      },
      {
        "name": "json",
        "line": 12
      }
    ],
    "docstrings": [
      {
        "type": "module_docstring",
        "text": "Demonstration of complex data structures in Python\n\nThis example shows:\n- Built-in container types (list, dict, set, tuple)\n- Nested data structures\n- Custom classes with special methods\n- Collections module specialized containers\n- Type annotations for complex structures",
        "range": {
          "start_line": 1,
          "start_column": 0,
          "end_line": 9,
          "end_column": 3
        }
      },
      {
        "type": "class_docstring",
        "text": "A rectangle defined by its top-left and bottom-right corners",
        "class": "Rectangle",
        "range": {
          "start_line": 20,
          "start_column": 0,
          "end_line": 22,
          "end_column": 56
        }
      },
      {
        "type": "method_docstring",
        "text": "Calculate the area of the rectangle",
        "function": "area",
        "class": "Rectangle",
        "range": {
          "start_line": 26,
          "start_column": 4,
          "end_line": 27,
          "end_column": 42
        }
      },
      {
        "type": "class_docstring",
        "text": "A person with a name, age, and a list of friends",
        "class": "Person",
        "range": {
          "start_line": 38,
          "start_column": 0,
          "end_line": 40,
          "end_column": 48
        }
      },
      {
        "type": "method_docstring",
        "text": "Add a friend to this person's friend list",
        "function": "add_friend",
        "class": "Person",
        "range": {
          "start_line": 46,
          "start_column": 4,
          "end_line": 47,
          "end_column": 48
        }
      },
      {
        "type": "function_docstring",
        "text": "Demonstrate Python's basic container types",
        "function": "demonstrate_basic_containers",
        "range": {
          "start_line": 57,
          "start_column": 0,
          "end_line": 58,
          "end_column": 46
        }
      },
      {
        "type": "function_docstring",
        "text": "Demonstrate nested data structures",
        "function": "demonstrate_nested_structures",
        "range": {
          "start_line": 86,
          "start_column": 0,
          "end_line": 87,
          "end_column": 39
        }
      },
      {
        "type": "function_docstring",
        "text": "Demonstrate specialized containers from the collections module",
        "function": "demonstrate_specialized_containers",
        "range": {
          "start_line": 134,
          "start_column": 0,
          "end_line": 135,
          "end_column": 64
        }
      },
      {
        "type": "function_docstring",
        "text": "Demonstrate custom classes and their usage in data structures",
        "function": "demonstrate_custom_classes",
        "range": {
          "start_line": 159,
          "start_column": 0,
          "end_line": 160,
          "end_column": 61
        }
      },
      {
        "type": "function_docstring",
        "text": "Demonstrate type annotations for complex structures",
        "function": "demonstrate_type_annotations",
        "range": {
          "start_line": 191,
          "start_column": 0,
          "end_line": 192,
          "end_column": 56
        }
      },
      {
        "type": "function_docstring",
        "text": "Main function to run all demonstrations",
        "function": "main",
        "range": {
          "start_line": 211,
          "start_column": 0,
          "end_line": 212,
          "end_column": 44
        }
      }
    ],
    "variable_declarations": [
      {
        "name": "Point",
        "type": "namedtuple",
        "line": 16,
        "initialized": true
      },
      {
        "name": "numbers",
        "type": "List[int]",
        "line": 61,
        "initialized": true
      },
      {
        "name": "person",
        "type": "Dict[str, Union[str, int]]",
        "line": 66,
        "initialized": true
      },
      {
        "name": "unique_numbers",
        "type": "Set[int]",
        "line": 71,
        "initialized": true
      },
      {
        "name": "coordinates",
        "type": "Tuple[int, int, int]",
        "line": 74,
        "initialized": true
      },
      {
        "name": "students",
        "type": "List[Dict[str, Union[str, List[int]]]]",
        "line": 90,
        "initialized": true
      },
      {
        "name": "class_grades",
        "type": "Dict[str, List[int]]",
        "line": 98,
        "initialized": true
      },
      {
        "name": "school",
        "type": "Dict[str, Union[str, Dict, int]]",
        "line": 105,
        "initialized": true
      },
      {
        "name": "university",
        "type": "Dict",
        "line": 116,
        "initialized": true
      },
      {
        "name": "word_counts",
        "type": "defaultdict",
        "line": 138,
        "initialized": true
      },
      {
        "name": "colors",
        "type": "List[str]",
        "line": 143,
        "initialized": true
      },
      {
        "name": "color_counter",
        "type": "Counter",
        "line": 144,
        "initialized": true
      },
      {
        "name": "queue",
        "type": "deque",
        "line": 148,
        "initialized": true
      },
      {
        "name": "p",
        "type": "Point",
        "line": 152,
        "initialized": true
      },
      {
        "name": "rect",
        "type": "Rectangle",
        "line": 164,
        "initialized": true
      },
      {
        "name": "alice",
        "type": "Person",
        "line": 168,
        "initialized": true
      },
      {
        "name": "bob",
        "type": "Person",
        "line": 169,
        "initialized": true
      },
      {
        "name": "charlie",
        "type": "Person",
        "line": 170,
        "initialized": true
      },
      {
        "name": "people",
        "type": "List[Person]",
        "line": 177,
        "initialized": true
      },
      {
        "name": "people_dict",
        "type": "Dict[str, Person]",
        "line": 180,
        "initialized": true
      },
      {
        "name": "friendship_graph",
        "type": "Dict[Person, List[Person]]",
        "line": 183,
        "initialized": true
      }
    ],
    "function_calls": [
      {
        "name": "namedtuple",
        "arguments": [
          "'Point'", 
          "['x', 'y']"
        ],
        "line": 16
      },
      {
        "name": "print",
        "arguments": [
          "\"1. Basic containers:\""
        ],
        "line": 59
      },
      {
        "name": "print",
        "arguments": [
          "f\"  List: {numbers}\""
        ],
        "line": 62
      },
      {
        "name": "numbers.append",
        "arguments": [
          "6"
        ],
        "line": 63
      },
      {
        "name": "print",
        "arguments": [
          "f\"  After append: {numbers}\""
        ],
        "line": 64
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Dictionary: {person}\""
        ],
        "line": 67
      },
      {
        "name": "print",
        "arguments": [
          "f\"  After adding key: {person}\""
        ],
        "line": 69
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Set (removes duplicates): {unique_numbers}\""
        ],
        "line": 72
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Tuple: {coordinates}\""
        ],
        "line": 75
      },
      {
        "name": "set",
        "arguments": [
          "numbers"
        ],
        "line": 78
      },
      {
        "name": "print",
        "arguments": [
          "f\"  List to set: {set(numbers)}\""
        ],
        "line": 78
      },
      {
        "name": "list",
        "arguments": [
          "person.keys()"
        ],
        "line": 79
      },
      {
        "name": "person.keys",
        "arguments": [],
        "line": 79
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Dictionary keys to list: {list(person.keys())}\""
        ],
        "line": 79
      },
      {
        "name": "tuple",
        "arguments": [
          "person.values()"
        ],
        "line": 80
      },
      {
        "name": "person.values",
        "arguments": [],
        "line": 80
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Dictionary values to tuple: {tuple(person.values())}\""
        ],
        "line": 80
      },
      {
        "name": "print",
        "arguments": [
          "\"\\n2. Nested data structures:\""
        ],
        "line": 88
      },
      {
        "name": "print",
        "arguments": [
          "f\"  List of dictionaries: {students}\""
        ],
        "line": 96
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Dictionary of lists: {class_grades}\""
        ],
        "line": 103
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Accessing nested data: {school['departments']['Math']['teachers']} Math teachers\""
        ],
        "line": 115
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Deeply nested access: {university['colleges'][0]['departments'][0]['students'][1][1]}\""
        ],
        "line": 130
      },
      {
        "name": "print",
        "arguments": [
          "\"\\n3. Specialized containers:\""
        ],
        "line": 136
      },
      {
        "name": "defaultdict",
        "arguments": [
          "int"
        ],
        "line": 138
      },
      {
        "name": "split",
        "arguments": [],
        "line": 139
      },
      {
        "name": "print",
        "arguments": [
          "f\"  defaultdict: {dict(word_counts)}\""
        ],
        "line": 141
      },
      {
        "name": "dict",
        "arguments": [
          "word_counts"
        ],
        "line": 141
      },
      {
        "name": "Counter",
        "arguments": [
          "colors"
        ],
        "line": 144
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Counter: {color_counter}\""
        ],
        "line": 145
      },
      {
        "name": "color_counter.most_common",
        "arguments": [
          "2"
        ],
        "line": 146
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Most common: {color_counter.most_common(2)}\""
        ],
        "line": 146
      },
      {
        "name": "deque",
        "arguments": [
          "[1, 2, 3]"
        ],
        "line": 148
      },
      {
        "name": "queue.append",
        "arguments": [
          "4"
        ],
        "line": 149
      },
      {
        "name": "queue.appendleft",
        "arguments": [
          "0"
        ],
        "line": 150
      },
      {
        "name": "print",
        "arguments": [
          "f\"  deque: {queue}\""
        ],
        "line": 151
      },
      {
        "name": "Point",
        "arguments": [
          "10",
          "20"
        ],
        "line": 152
      },
      {
        "name": "print",
        "arguments": [
          "f\"  namedtuple: {p}\""
        ],
        "line": 153
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Accessing by name: p.x = {p.x}, p.y = {p.y}\""
        ],
        "line": 154
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Accessing by index: p[0] = {p[0]}, p[1] = {p[1]}\""
        ],
        "line": 155
      },
      {
        "name": "print",
        "arguments": [
          "\"\\n4. Custom classes in data structures:\""
        ],
        "line": 161
      },
      {
        "name": "Rectangle",
        "arguments": [
          "Point(0, 0)",
          "Point(5, 10)"
        ],
        "line": 164
      },
      {
        "name": "Point",
        "arguments": [
          "0",
          "0"
        ],
        "line": 164
      },
      {
        "name": "Point",
        "arguments": [
          "5",
          "10"
        ],
        "line": 164
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Rectangle: {rect}\""
        ],
        "line": 165
      },
      {
        "name": "rect.area",
        "arguments": [],
        "line": 166
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Area: {rect.area()}\""
        ],
        "line": 166
      },
      {
        "name": "Person",
        "arguments": [
          "\"Alice\"",
          "30"
        ],
        "line": 168
      },
      {
        "name": "Person",
        "arguments": [
          "\"Bob\"",
          "25"
        ],
        "line": 169
      },
      {
        "name": "Person",
        "arguments": [
          "\"Charlie\"",
          "40"
        ],
        "line": 170
      },
      {
        "name": "alice.add_friend",
        "arguments": [
          "bob"
        ],
        "line": 173
      },
      {
        "name": "alice.add_friend",
        "arguments": [
          "charlie"
        ],
        "line": 174
      },
      {
        "name": "bob.add_friend",
        "arguments": [
          "charlie"
        ],
        "line": 175
      },
      {
        "name": "print",
        "arguments": [
          "f\"  List of custom objects: {people}\""
        ],
        "line": 178
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Dictionary with custom objects: {list(people_dict.keys())}\""
        ],
        "line": 181
      },
      {
        "name": "list",
        "arguments": [
          "people_dict.keys()"
        ],
        "line": 181
      },
      {
        "name": "people_dict.keys",
        "arguments": [],
        "line": 181
      },
      {
        "name": "print",
        "arguments": [
          "f\"  Alice's friends: {[str(friend) for friend in friendship_graph[alice]]}\""
        ],
        "line": 188
      },
      {
        "name": "print",
        "arguments": [
          "\"\\n5. Type annotations for complex structures:\""
        ],
        "line": 193
      },
      {
        "name": "print",
        "arguments": [
          "\"  # Complex type definitions:\""
        ],
        "line": 196
      },
      {
        "name": "print",
        "arguments": [
          "\"  Vector = List[float]\""
        ],
        "line": 197
      },
      {
        "name": "print",
        "arguments": [
          "\"  Matrix = List[Vector]\""
        ],
        "line": 198
      },
      {
        "name": "print",
        "arguments": [
          "\"  Student = Dict[str, Union[str, int, List[int]]]\""
        ],
        "line": 199
      },
      {
        "name": "print",
        "arguments": [
          "\"  SchoolData = Dict[str, Dict[str, Union[int, List[Student]]]]\""
        ],
        "line": 200
      },
      {
        "name": "print",
        "arguments": [
          "\"  # Example function with complex type annotations:\""
        ],
        "line": 203
      },
      {
        "name": "print",
        "arguments": [
          "\"  def process_student_data(students: List[Student]) -> Dict[str, float]:\""
        ],
        "line": 204
      },
      {
        "name": "print",
        "arguments": [
          "\"      # Calculate average grades for each student\""
        ],
        "line": 205
      },
      {
        "name": "print",
        "arguments": [
          "\"      return {student['name']: sum(student['grades'])/len(student['grades'])\""
        ],
        "line": 206
      },
      {
        "name": "print",
        "arguments": [
          "\"              for student in students}\""
        ],
        "line": 207
      },
      {
        "name": "print",
        "arguments": [
          "\"Complex Data Structures in Python\\n\" + \"=\"*30"
        ],
        "line": 213
      },
      {
        "name": "demonstrate_basic_containers",
        "arguments": [],
        "line": 215
      },
      {
        "name": "demonstrate_nested_structures",
        "arguments": [],
        "line": 216
      },
      {
        "name": "demonstrate_specialized_containers",
        "arguments": [],
        "line": 217
      },
      {
        "name": "demonstrate_custom_classes",
        "arguments": [],
        "line": 218
      },
      {
        "name": "demonstrate_type_annotations",
        "arguments": [],
        "line": 219
      },
      {
        "name": "print",
        "arguments": [
          "\"\\nAll examples completed!\""
        ],
        "line": 221
      },
      {
        "name": "main",
        "arguments": [],
        "line": 225
      }
    ],
    "comprehensions": [
      {
        "type": "dict_comprehension",
        "expression": "{person.name: person for person in people}",
        "line": 180
      },
      {
        "type": "list_comprehension",
        "expression": "[str(friend) for friend in friendship_graph[alice]]",
        "line": 188
      }
    ],
    "decorators": [
      {
        "name": "dataclass",
        "applied_to": "Rectangle",
        "line": 19
      }
    ],
    "type_annotations": [
      {
        "name": "top_left",
        "type": "Point",
        "line": 24
      },
      {
        "name": "bottom_right",
        "type": "Point",
        "line": 25
      },
      {
        "name": "area",
        "return_type": "float",
        "line": 26
      },
      {
        "name": "__str__",
        "return_type": "str",
        "line": 32
      },
      {
        "name": "name",
        "type": "str",
        "line": 41
      },
      {
        "name": "age",
        "type": "int",
        "line": 41
      },
      {
        "name": "friends",
        "type": "List['Person']",
        "line": 44
      },
      {
        "name": "friend",
        "type": "'Person'",
        "line": 46
      },
      {
        "name": "add_friend",
        "return_type": "None",
        "line": 46
      },
      {
        "name": "__repr__",
        "return_type": "str",
        "line": 50
      },
      {
        "name": "__str__",
        "return_type": "str",
        "line": 53
      }
    ]
  }
}
