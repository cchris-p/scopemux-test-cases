{
  "language": "Python",
  "ast": {
    "type": "module",
    "functions": [
      {
        "name": "simple_generator",
        "type": "generator_function",
        "parameters": [],
        "return_type": "Generator[int, None, None]",
        "body_range": {
          "start_line": 16,
          "start_column": 0,
          "end_line": 21,
          "end_column": 4
        },
        "docstring": "A simple generator that yields a sequence of values",
        "yields": [
          {"value": "1", "line": 17},
          {"value": "2", "line": 18},
          {"value": "3", "line": 19},
          {"value": "4", "line": 20},
          {"value": "5", "line": 21}
        ]
      },
      {
        "name": "countdown",
        "type": "generator_function",
        "parameters": [
          {"name": "n", "type": "int"}
        ],
        "return_type": "Generator[int, None, None]",
        "body_range": {
          "start_line": 24,
          "start_column": 0,
          "end_line": 28,
          "end_column": 4
        },
        "docstring": "Generate a countdown sequence from n to 1",
        "yields": [
          {"value": "n", "line": 26}
        ]
      },
      {
        "name": "fibonacci",
        "type": "generator_function",
        "parameters": [
          {"name": "limit", "type": "int"}
        ],
        "return_type": "Generator[int, None, None]",
        "body_range": {
          "start_line": 31,
          "start_column": 0,
          "end_line": 36,
          "end_column": 4
        },
        "docstring": "Generate Fibonacci numbers up to the given limit",
        "yields": [
          {"value": "a", "line": 34}
        ]
      },
      {
        "name": "infinite_counter",
        "type": "generator_function",
        "parameters": [],
        "return_type": "Generator[int, None, None]",
        "body_range": {
          "start_line": 39,
          "start_column": 0,
          "end_line": 44,
          "end_column": 4
        },
        "docstring": "An infinite generator that counts from 0",
        "yields": [
          {"value": "i", "line": 42}
        ]
      },
      {
        "name": "demonstrate_basic_generators",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 47,
          "start_column": 0,
          "end_line": 80,
          "end_column": 4
        },
        "docstring": "Demonstrate basic generator usage"
      },
      {
        "name": "demonstrate_generator_expressions",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 83,
          "start_column": 0,
          "end_line": 108,
          "end_column": 4
        },
        "docstring": "Demonstrate generator expressions"
      },
      {
        "name": "echo_coroutine",
        "type": "generator_function",
        "parameters": [],
        "return_type": "Generator[None, str, None]",
        "body_range": {
          "start_line": 111,
          "start_column": 0,
          "end_line": 116,
          "end_column": 4
        },
        "docstring": "A coroutine that echoes back what it receives",
        "yields": [
          {"line": 113, "is_coroutine": true}
        ]
      },
      {
        "name": "averager",
        "type": "generator_function",
        "parameters": [],
        "return_type": "Generator[float, float, None]",
        "body_range": {
          "start_line": 119,
          "start_column": 0,
          "end_line": 128,
          "end_column": 4
        },
        "docstring": "A coroutine that computes a running average",
        "yields": [
          {"value": "average", "line": 125, "is_coroutine": true}
        ]
      },
      {
        "name": "demonstrate_coroutines",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 131,
          "start_column": 0,
          "end_line": 156,
          "end_column": 4
        },
        "docstring": "Demonstrate coroutines (bidirectional generators)"
      },
      {
        "name": "subgenerator",
        "type": "generator_function",
        "parameters": [
          {"name": "n", "type": "int"}
        ],
        "return_type": "Generator[int, None, int]",
        "body_range": {
          "start_line": 159,
          "start_column": 0,
          "end_line": 166,
          "end_column": 4
        },
        "docstring": "A subgenerator that yields values and returns a result",
        "yields": [
          {"value": "i", "line": 164}
        ],
        "returns": "result"
      },
      {
        "name": "delegating_generator",
        "type": "generator_function",
        "parameters": [
          {"name": "n", "type": "int"}
        ],
        "return_type": "Generator[int, None, int]",
        "body_range": {
          "start_line": 169,
          "start_column": 0,
          "end_line": 173,
          "end_column": 4
        },
        "docstring": "A generator that delegates to another generator",
        "yields_from": [
          {"generator": "subgenerator(n)", "line": 171}
        ],
        "returns": "result * 2"
      },
      {
        "name": "demonstrate_yield_from",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 176,
          "start_column": 0,
          "end_line": 198,
          "end_column": 4
        },
        "docstring": "Demonstrate generator delegation with yield from",
        "inner_functions": [
          {
            "name": "gen_from_list",
            "type": "generator_function",
            "yields_from": [
              {"iterable": "[1, 2, 3, 4, 5]", "line": 180}
            ]
          }
        ]
      },
      {
        "name": "generator_context_manager",
        "type": "generator_function",
        "parameters": [
          {"name": "name", "type": "str"}
        ],
        "return_type": "Generator[str, None, None]",
        "body_range": {
          "start_line": 202,
          "start_column": 0,
          "end_line": 209,
          "end_column": 4
        },
        "docstring": "A context manager implemented with a generator",
        "yields": [
          {"value": "name.upper()", "line": 204}
        ],
        "decorators": ["contextlib.contextmanager"]
      },
      {
        "name": "demonstrate_context_managers",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 212,
          "start_column": 0,
          "end_line": 226,
          "end_column": 4
        },
        "docstring": "Demonstrate generators as context managers"
      },
      {
        "name": "exception_handling_generator",
        "type": "generator_function",
        "parameters": [],
        "return_type": "Generator[int, None, None]",
        "body_range": {
          "start_line": 229,
          "start_column": 0,
          "end_line": 237,
          "end_column": 4
        },
        "docstring": "A generator that demonstrates exception handling",
        "yields": [
          {"value": "1", "line": 231},
          {"value": "2", "line": 232},
          {"value": "3", "line": 233},
          {"value": "999", "line": 235, "in_except": true}
        ]
      },
      {
        "name": "demonstrate_exception_handling",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 240,
          "start_column": 0,
          "end_line": 252,
          "end_column": 4
        },
        "docstring": "Demonstrate exception handling in generators"
      },
      {
        "name": "main",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 255,
          "start_column": 0,
          "end_line": 262,
          "end_column": 4
        },
        "docstring": "Run all demonstrations"
      }
    ],
    "imports": [
      {
        "name": "typing",
        "symbols": ["Generator", "Iterator", "List", "Dict", "Any", "Optional", "TypeVar", "Generic"],
        "line": 12
      },
      {
        "name": "time",
        "line": 13
      },
      {
        "name": "contextlib",
        "line": 14
      }
    ],
    "docstrings": [
      {
        "type": "module_docstring",
        "text": "Demonstration of Python generators and coroutines\n\nThis example shows:\n- Basic generators with yield\n- Generator functions vs generator expressions\n- Infinite generators\n- Bidirectional communication with generators (coroutines)\n- Generator delegation with yield from\n- Context managers with generators\n- Exception handling in generators",
        "range": {
          "start_line": 1,
          "start_column": 0,
          "end_line": 11,
          "end_column": 3
        }
      }
    ],
    "decorators": [
      {
        "name": "contextlib.contextmanager",
        "applied_to": "generator_context_manager",
        "line": 201
      }
    ],
    "variable_declarations": [
      {
        "name": "gen",
        "line": 50,
        "initialized": true
      },
      {
        "name": "squares_gen",
        "line": 86,
        "initialized": true
      },
      {
        "name": "evens_gen",
        "line": 92,
        "initialized": true
      },
      {
        "name": "expression",
        "line": 97,
        "initialized": true
      },
      {
        "name": "counter",
        "line": 103,
        "initialized": true
      },
      {
        "name": "echo",
        "line": 135,
        "initialized": true
      },
      {
        "name": "avg",
        "line": 143,
        "initialized": true
      },
      {
        "name": "gen",
        "line": 189,
        "initialized": true
      },
      {
        "name": "gen",
        "line": 242,
        "initialized": true
      }
    ],
    "generator_expressions": [
      {
        "type": "generator_expression",
        "expression": "(x**2 for x in range(1, 6))",
        "line": 86
      },
      {
        "type": "generator_expression",
        "expression": "(x for x in range(10) if x % 2 == 0)",
        "line": 92
      },
      {
        "type": "generator_expression",
        "expression": "((a, b) for a in range(3) for b in range(3) if a != b)",
        "line": 97
      }
    ],
    "context_managers": [
      {
        "type": "context_manager",
        "generator": "generator_context_manager",
        "range": {
          "start_line": 216,
          "start_column": 4,
          "end_line": 219,
          "end_column": 5
        }
      },
      {
        "type": "context_manager",
        "generator": "generator_context_manager",
        "range": {
          "start_line": 222,
          "start_column": 8,
          "end_line": 225,
          "end_column": 9
        },
        "has_exception": true
      }
    ],
    "yield_statements": [
      {"function": "simple_generator", "line": 17, "value": "1"},
      {"function": "simple_generator", "line": 18, "value": "2"},
      {"function": "simple_generator", "line": 19, "value": "3"},
      {"function": "simple_generator", "line": 20, "value": "4"},
      {"function": "simple_generator", "line": 21, "value": "5"},
      {"function": "countdown", "line": 26, "value": "n"},
      {"function": "fibonacci", "line": 34, "value": "a"},
      {"function": "infinite_counter", "line": 42, "value": "i"},
      {"function": "echo_coroutine", "line": 113, "is_coroutine": true},
      {"function": "averager", "line": 125, "value": "average", "is_coroutine": true},
      {"function": "subgenerator", "line": 164, "value": "i"},
      {"function": "generator_context_manager", "line": 204, "value": "name.upper()"},
      {"function": "exception_handling_generator", "line": 231, "value": "1"},
      {"function": "exception_handling_generator", "line": 232, "value": "2"},
      {"function": "exception_handling_generator", "line": 233, "value": "3"},
      {"function": "exception_handling_generator", "line": 235, "value": "999", "in_except": true}
    ],
    "yield_from_statements": [
      {"function": "delegating_generator", "line": 171, "value": "subgenerator(n)"},
      {"function": "gen_from_list", "line": 180, "value": "[1, 2, 3, 4, 5]"}
    ],
    "function_calls": [
      {
        "name": "main",
        "arguments": [],
        "line": 265
      }
    ],
    "type_annotations": [
      {
        "name": "simple_generator",
        "return_type": "Generator[int, None, None]",
        "line": 16
      },
      {
        "name": "countdown",
        "return_type": "Generator[int, None, None]",
        "line": 24
      },
      {
        "name": "fibonacci",
        "return_type": "Generator[int, None, None]",
        "line": 31
      },
      {
        "name": "infinite_counter",
        "return_type": "Generator[int, None, None]",
        "line": 39
      },
      {
        "name": "demonstrate_basic_generators",
        "return_type": "None",
        "line": 47
      },
      {
        "name": "demonstrate_generator_expressions",
        "return_type": "None",
        "line": 83
      },
      {
        "name": "echo_coroutine",
        "return_type": "Generator[None, str, None]",
        "line": 111
      },
      {
        "name": "averager",
        "return_type": "Generator[float, float, None]",
        "line": 119
      },
      {
        "name": "demonstrate_coroutines",
        "return_type": "None",
        "line": 131
      },
      {
        "name": "subgenerator",
        "return_type": "Generator[int, None, int]",
        "line": 159
      },
      {
        "name": "delegating_generator",
        "return_type": "Generator[int, None, int]",
        "line": 169
      },
      {
        "name": "demonstrate_yield_from",
        "return_type": "None",
        "line": 176
      },
      {
        "name": "generator_context_manager",
        "return_type": "Generator[str, None, None]",
        "line": 202
      },
      {
        "name": "demonstrate_context_managers",
        "return_type": "None",
        "line": 212
      },
      {
        "name": "exception_handling_generator",
        "return_type": "Generator[int, None, None]",
        "line": 229
      },
      {
        "name": "demonstrate_exception_handling",
        "return_type": "None",
        "line": 240
      },
      {
        "name": "main",
        "return_type": "None",
        "line": 255
      }
    ]
  }
}
