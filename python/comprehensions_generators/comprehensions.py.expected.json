{
  "language": "Python",
  "ast": {
    "type": "module",
    "functions": [
      {
        "name": "simple_list_comprehensions",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 16,
          "start_column": 0,
          "end_line": 39,
          "end_column": 4
        },
        "docstring": "Demonstrate basic list comprehensions"
      },
      {
        "name": "conditional_list_comprehensions",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 42,
          "start_column": 0,
          "end_line": 62,
          "end_column": 4
        },
        "docstring": "Demonstrate list comprehensions with conditions"
      },
      {
        "name": "set_comprehensions",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 65,
          "start_column": 0,
          "end_line": 85,
          "end_column": 4
        },
        "docstring": "Demonstrate set comprehensions"
      },
      {
        "name": "dict_comprehensions",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 88,
          "start_column": 0,
          "end_line": 119,
          "end_column": 4
        },
        "docstring": "Demonstrate dictionary comprehensions"
      },
      {
        "name": "nested_comprehensions",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 122,
          "start_column": 0,
          "end_line": 144,
          "end_column": 4
        },
        "docstring": "Demonstrate nested comprehensions"
      },
      {
        "name": "generator_expressions",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 147,
          "start_column": 0,
          "end_line": 180,
          "end_column": 4
        },
        "docstring": "Demonstrate generator expressions"
      },
      {
        "name": "main",
        "type": "function_definition",
        "parameters": [],
        "return_type": "None",
        "body_range": {
          "start_line": 183,
          "start_column": 0,
          "end_line": 190,
          "end_column": 4
        },
        "docstring": "Run all examples"
      }
    ],
    "imports": [
      {
        "name": "typing",
        "symbols": ["List", "Dict", "Set", "Generator", "Iterator", "Tuple"],
        "line": 11
      },
      {
        "name": "sys",
        "line": 12
      }
    ],
    "docstrings": [
      {
        "type": "module_docstring",
        "text": "Demonstration of Python comprehensions\n\nThis example shows:\n- List comprehensions\n- Set comprehensions\n- Dictionary comprehensions\n- Nested comprehensions\n- Conditional comprehensions\n- Generator expressions",
        "range": {
          "start_line": 1,
          "start_column": 0,
          "end_line": 10,
          "end_column": 3
        }
      },
      {
        "type": "function_docstring",
        "text": "Demonstrate basic list comprehensions",
        "function": "simple_list_comprehensions",
        "range": {
          "start_line": 16,
          "start_column": 0,
          "end_line": 17,
          "end_column": 43
        }
      },
      {
        "type": "function_docstring",
        "text": "Demonstrate list comprehensions with conditions",
        "function": "conditional_list_comprehensions",
        "range": {
          "start_line": 42,
          "start_column": 0,
          "end_line": 43,
          "end_column": 54
        }
      },
      {
        "type": "function_docstring",
        "text": "Demonstrate set comprehensions",
        "function": "set_comprehensions",
        "range": {
          "start_line": 65,
          "start_column": 0,
          "end_line": 66,
          "end_column": 37
        }
      },
      {
        "type": "function_docstring",
        "text": "Demonstrate dictionary comprehensions",
        "function": "dict_comprehensions",
        "range": {
          "start_line": 88,
          "start_column": 0,
          "end_line": 89,
          "end_column": 43
        }
      },
      {
        "type": "function_docstring",
        "text": "Demonstrate nested comprehensions",
        "function": "nested_comprehensions",
        "range": {
          "start_line": 122,
          "start_column": 0,
          "end_line": 123,
          "end_column": 41
        }
      },
      {
        "type": "function_docstring",
        "text": "Demonstrate generator expressions",
        "function": "generator_expressions",
        "range": {
          "start_line": 147,
          "start_column": 0,
          "end_line": 148,
          "end_column": 42
        }
      },
      {
        "type": "function_docstring",
        "text": "Run all examples",
        "function": "main",
        "range": {
          "start_line": 183,
          "start_column": 0,
          "end_line": 184,
          "end_column": 25
        }
      }
    ],
    "variable_declarations": [
      {
        "name": "numbers",
        "line": 22,
        "initialized": true
      },
      {
        "name": "squares",
        "line": 23,
        "initialized": true
      },
      {
        "name": "even_numbers",
        "line": 27,
        "initialized": true
      },
      {
        "name": "names",
        "line": 31,
        "initialized": true
      },
      {
        "name": "upper_names",
        "line": 32,
        "initialized": true
      },
      {
        "name": "matrix",
        "line": 36,
        "initialized": true
      },
      {
        "name": "flattened",
        "line": 37,
        "initialized": true
      },
      {
        "name": "numbers",
        "line": 46,
        "initialized": true
      },
      {
        "name": "divisible_by_3",
        "line": 47,
        "initialized": true
      },
      {
        "name": "parity",
        "line": 51,
        "initialized": true
      },
      {
        "name": "filtered",
        "line": 55,
        "initialized": true
      },
      {
        "name": "filtered_alt",
        "line": 59,
        "initialized": true
      },
      {
        "name": "numbers",
        "line": 69,
        "initialized": true
      },
      {
        "name": "unique_squares",
        "line": 70,
        "initialized": true
      },
      {
        "name": "text",
        "line": 74,
        "initialized": true
      },
      {
        "name": "char_set",
        "line": 75,
        "initialized": true
      },
      {
        "name": "duplicates",
        "line": 79,
        "initialized": true
      },
      {
        "name": "unique",
        "line": 80,
        "initialized": true
      },
      {
        "name": "numbers",
        "line": 92,
        "initialized": true
      },
      {
        "name": "squares_dict",
        "line": 93,
        "initialized": true
      },
      {
        "name": "keys",
        "line": 97,
        "initialized": true
      },
      {
        "name": "values",
        "line": 98,
        "initialized": true
      },
      {
        "name": "combined",
        "line": 99,
        "initialized": true
      },
      {
        "name": "original_dict",
        "line": 103,
        "initialized": true
      },
      {
        "name": "filtered_dict",
        "line": 104,
        "initialized": true
      },
      {
        "name": "swapped",
        "line": 108,
        "initialized": true
      },
      {
        "name": "word",
        "line": 112,
        "initialized": true
      },
      {
        "name": "char_freq",
        "line": 113,
        "initialized": true
      },
      {
        "name": "matrix",
        "line": 126,
        "initialized": true
      },
      {
        "name": "nested_dict",
        "line": 131,
        "initialized": true
      },
      {
        "name": "mult_table",
        "line": 136,
        "initialized": true
      },
      {
        "name": "gen",
        "line": 151,
        "initialized": true
      },
      {
        "name": "big_list",
        "line": 159,
        "initialized": true
      },
      {
        "name": "big_gen",
        "line": 160,
        "initialized": true
      },
      {
        "name": "list_size",
        "line": 162,
        "initialized": true
      },
      {
        "name": "gen_size",
        "line": 163,
        "initialized": true
      },
      {
        "name": "filtered_gen",
        "line": 169,
        "initialized": true
      },
      {
        "name": "chain",
        "line": 174,
        "initialized": true
      }
    ],
    "comprehensions": [
      {
        "type": "list_comprehension",
        "expression": "[x * x for x in numbers]",
        "line": 23
      },
      {
        "type": "list_comprehension",
        "expression": "[x for x in range(10) if x % 2 == 0]",
        "line": 27
      },
      {
        "type": "list_comprehension",
        "expression": "[name.upper() for name in names]",
        "line": 32
      },
      {
        "type": "list_comprehension",
        "expression": "[num for row in matrix for num in row]",
        "line": 37
      },
      {
        "type": "list_comprehension",
        "expression": "[x for x in numbers if x % 3 == 0]",
        "line": 47
      },
      {
        "type": "list_comprehension",
        "expression": "[\"even\" if x % 2 == 0 else \"odd\" for x in range(5)]",
        "line": 51
      },
      {
        "type": "list_comprehension",
        "expression": "[x for x in range(50) if x % 2 == 0 if x % 3 == 0]",
        "line": 55
      },
      {
        "type": "list_comprehension",
        "expression": "[x for x in range(50) if x % 2 == 0 and x % 3 == 0]",
        "line": 59
      },
      {
        "type": "set_comprehension",
        "expression": "{x * x for x in numbers}",
        "line": 70
      },
      {
        "type": "set_comprehension",
        "expression": "{c for c in text if c.isalpha()}",
        "line": 75
      },
      {
        "type": "set_comprehension",
        "expression": "{x for x in duplicates}",
        "line": 80
      },
      {
        "type": "dict_comprehension",
        "expression": "{x: x * x for x in numbers}",
        "line": 93
      },
      {
        "type": "dict_comprehension",
        "expression": "{k: v for k, v in zip(keys, values)}",
        "line": 99
      },
      {
        "type": "dict_comprehension",
        "expression": "{k: v for k, v in original_dict.items() if v % 2 == 0}",
        "line": 104
      },
      {
        "type": "dict_comprehension",
        "expression": "{v: k for k, v in original_dict.items()}",
        "line": 108
      },
      {
        "type": "dict_comprehension",
        "expression": "{c: word.count(c) for c in set(word)}",
        "line": 113
      },
      {
        "type": "list_comprehension",
        "expression": "[[i + j for j in range(3)] for i in range(3)]",
        "line": 126
      },
      {
        "type": "dict_comprehension",
        "expression": "{i: {j: i * j for j in range(1, 4)} for i in range(1, 4)}",
        "line": 131
      },
      {
        "type": "list_comprehension",
        "expression": "[[i * j for j in range(1, 6)] for i in range(1, 6)]",
        "line": 136
      },
      {
        "type": "list_comprehension",
        "expression": "[x for x in range(1000000)]",
        "line": 159
      }
    ],
    "generator_expressions": [
      {
        "type": "generator_expression",
        "expression": "(x * x for x in range(5))",
        "line": 151
      },
      {
        "type": "generator_expression",
        "expression": "(x for x in range(1000000))",
        "line": 160
      },
      {
        "type": "generator_expression",
        "expression": "(x for x in range(10) if x % 2 == 0)",
        "line": 169
      },
      {
        "type": "generator_expression",
        "expression": "(x * x for x in range(10))",
        "line": 174
      }
    ],
    "function_calls": [
      {
        "name": "simple_list_comprehensions",
        "arguments": [],
        "line": 185
      },
      {
        "name": "conditional_list_comprehensions",
        "arguments": [],
        "line": 186
      },
      {
        "name": "set_comprehensions",
        "arguments": [],
        "line": 187
      },
      {
        "name": "dict_comprehensions",
        "arguments": [],
        "line": 188
      },
      {
        "name": "nested_comprehensions",
        "arguments": [],
        "line": 189
      },
      {
        "name": "generator_expressions",
        "arguments": [],
        "line": 190
      },
      {
        "name": "main",
        "arguments": [],
        "line": 193
      }
    ],
    "type_annotations": [
      {
        "name": "simple_list_comprehensions",
        "return_type": "None",
        "line": 16
      },
      {
        "name": "conditional_list_comprehensions",
        "return_type": "None",
        "line": 42
      },
      {
        "name": "set_comprehensions",
        "return_type": "None",
        "line": 65
      },
      {
        "name": "dict_comprehensions",
        "return_type": "None",
        "line": 88
      },
      {
        "name": "nested_comprehensions",
        "return_type": "None",
        "line": 122
      },
      {
        "name": "generator_expressions",
        "return_type": "None",
        "line": 147
      },
      {
        "name": "main",
        "return_type": "None",
        "line": 183
      }
    ]
  }
}
